generator client {
 provider = "prisma-client-js"
}

datasource db {
 provider = "postgresql"
 url      = env("DATABASE_URL")
}

enum Role {
 USER
 SALLER
 ADMIN
}

enum Status {
 ACTIVE
 INACTIVE
 SOLD
 DELETED
}

model Account {
 id                String  @id @default(cuid())
 userId            String  @map("user_id")
 type              String
 provider          String
 providerAccountId String  @map("provider_account_id")
 refresh_token     String? @db.Text
 access_token      String? @db.Text
 expires_at        Int?
 token_type        String?
 scope             String?
 id_token          String? @db.Text
 session_state     String?

 user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([provider, providerAccountId])
 @@map("accounts")
}

model User {
 id            String    @id @default(cuid())
 name          String?
 firstName     String?
 lastName      String?
 email         String?   @unique
 password      String?
 emailVerified DateTime? @map("email_verified")
 image         String?
 coverImage    String?
 phone         String?
 createdAt     DateTime  @default(now())
 role          Role      @default(USER)
 accounts      Account[]
 listings      Listing[]

 @@map("users")
}

model VerificationToken {
 id      String   @id @default(cuid())
 email   String
 token   String   @unique
 expires DateTime

 @@unique([email, token])
 @@map("verification_tokens")
}

model Listing {
 id           String   @id @default(cuid())
 title        String
 description  String
 category     String
 price        Int
 condition    String
 isNegotiable Boolean
 tags         String[]
 image        String[]
 email        String
 location     String
 phone        String
 status       Status   @default(ACTIVE)
 createdAt    DateTime @default(now())
 // Relations
 userId       String   @map("user_id")
 user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@map("listings")
}
